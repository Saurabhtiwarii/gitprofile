{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["url","App","useState","isLoading","setIsLoading","isError","setIsError","user","setUser","repository","setRepository","a","fetch","response","status","json","getUser","repos_url","repo","repoJson","useEffect","fetchUser","className","src","avatar_url","alt","name","bio","map","index","href","html_url","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mPAGMA,EAAM,8CA2EGC,MA1Ef,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGUJ,mBAAS,IAHnB,mBAGNK,EAHM,KAGDC,EAHC,OAIuBN,mBAAS,IAJhC,mBAINO,EAJM,KAIMC,EAJN,iDAWb,kCAAAC,EAAA,sEACyBC,MAAMZ,GAD/B,aACQa,EADR,QAEeC,QAAS,KAAOD,EAASC,QAAS,KAFjD,iCAG0BD,EAASE,OAHnC,cAGUC,EAHV,OAIIR,EAAQQ,GAJZ,UAKuBJ,MAAMI,EAAQC,WALrC,eAKUC,EALV,iBAM2BA,EAAKH,OANhC,QAMUI,EANV,OAOIT,EAAcS,GACdf,GAAa,GARjB,wBAWIA,GAAa,GACbE,GAAW,GAZf,6CAXa,sBA4Bb,OAtBAc,qBAAU,YANG,mCAOTC,KAED,IAmBClB,EAEF,4CAIEE,EAEF,6DAKA,sBAAKiB,UAAU,MAAf,UACE,6CACA,sBAAKA,UAAU,OAAf,UAEE,sBAAKA,UAAU,gBAAf,UACE,qBAAKA,UAAU,YAAf,SACG,qBAAKC,IAAKhB,EAAKiB,WAAYC,IAAI,mBAElC,qBAAIH,UAAU,WAAd,cAA0B,4CAAqB,uBAAMf,EAAKmB,WAG5D,sBAAKJ,UAAU,YAAf,cAA4B,gDAAyB,uBAAMf,EAAKoB,OAChE,sBAAKL,UAAU,uBAAf,UACE,kDACF,oBAAIA,UAAU,qBAAd,SAEMb,EAAWmB,KAAI,SAACV,EAAMW,GACpB,OACG,qBAAIP,UAAU,OAAd,UACD,qBAAKA,UAAU,aAAf,SAA6BJ,EAAKQ,OAClC,mBAAGI,KAAMZ,EAAKa,SAAd,qBAF2BF,kBCnD9BG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c6026f2f.chunk.js","sourcesContent":["import './App.css';\nimport React , {useState, useEffect} from 'react';\n\nconst url = 'https://api.github.com/users/Saurabhtiwarii';\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isError, setIsError] = useState(false);\n  const [user,setUser] = useState({});\n  const [repository, setRepository] = useState({});\n\n  useEffect(() => {\n      fetchUser();\n\n  }, []);\n\n  async function fetchUser(){\n    const response = await fetch(url);\n    if( response.status >=200 && response.status <=299){\n      const getUser = await response.json();\n      setUser(getUser);\n      const repo = await fetch(getUser.repos_url);\n      const repoJson = await repo.json();\n      setRepository(repoJson);\n      setIsLoading(false);\n    }\n    else{\n      setIsLoading(false);\n      setIsError(true);\n    }\n  }\n\n\n  if (isLoading){\n    return(\n    <h1>Loading...</h1>\n    ) \n  }\n\n  if (isError){\n    return(\n    <h1>Ooops Getting some error...</h1>\n    ) \n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Git Profile</h1>\n      <div className=\"user\">\n\n        <div className=\"user__profile\">\n          <div className=\"user__img\">\n             <img src={user.avatar_url} alt=\"user profile\"/>\n          </div>\n          <h2 className=\"username\"> <span>Username</span><br/>{user.name}</h2>\n        </div>\n\n        <div className=\"user__bio\"> <span>Github Bio :</span><br/>{user.bio}</div>\n        <div className=\"user__repo_container\">\n          <h2>Git Repositories</h2>\n        <ul className=\"user__repositories\">\n              {\n              repository.map((repo, index) => {\n                return(\n                   <li className=\"repo\" key={index}>\n                  <div className=\"repo__name\">{repo.name}</div>\n                  <a href={repo.html_url}>Check</a>\n                </li>\n                )  \n              }) \n              }\n        </ul>\n        </div>\n         \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}